(function(){Function.prototype.method=function(name,func){this.prototype[name]=func;return this};Function.method("inherits",function(superCtor){this.super_=superCtor;this.prototype=Object.create(superCtor.prototype,{constructor:{value:this,enumerable:false,writable:true,configurable:true}});return this});var Events=function(){if(!(this instanceof Events)){return new Events}this._cbList={}};Events.method("fire",function(name,args){if(!this._cbList[name]){return}for(var i in this._cbList[name]){this._cbList[name][i].apply(this,args)}});Events.method("fireLater",function(name,args){if(args===undefined){args=[]}return function(){var a=args.concat(Array.prototype.slice.call(arguments,0));this.fire(name,a.length>0?a:undefined)}.bind(this)});Events.method("on",function(name,func){if(!this._cbList[name]){this._cbList[name]=[]}this._cbList[name].push(func);return{name:name,index:this._cbList[name].length-1}});Events.method("off",function(id){this._cbList[id.name].splice(id.index);return this});StateMachine=function(initState){if(!(this instanceof StateMachine)){return new StateMachine(initState)}Events.call(this);this._state=initState};StateMachine.inherits(Events);StateMachine.method("inState",function(state){return this._state===state});StateMachine.method("getState",function(){return this._state});StateMachine.method("setState",function(newState){var oldState=this._state;this._state=newState;this.fire("state_changed",[oldState,newState]);return this});var MBAP_TID=0,MBAP_PID=2,MBAP_LEN=4,MBAP_UID=6,BODY_FC=0,BODY_START=1,BODY_COUNT=3,READ_COILS=1,READ_INPUT_REGISTERS=4,WRITE_SINGLE_COIL=5,WRITE_SINGLE_REGISTER=6;ModbusClient=function(timeout){if(!(this instanceof ModbusClient)){return new ModbusClient(timeout)}StateMachine.call(this,"init");this.host="localhost";this.port=502;this.timeout=timeout||5e3;this.id=0;this.handler={};var that=this;this._receiveListener=function(resp){var offset=0,hasMore=true,data=resp.data;while(hasMore){var mbap=new DataView(data,offset+0,7),tid=mbap.getUint16(0),pid=mbap.getUint16(2),len=mbap.getUint16(4),uid=mbap.getUint8(6),res={};res.header={transaction_id:tid,protocol_id:pid,length:len,unit_id:uid};var pdu=new DataView(data,offset+7,2);res.pdu={fc:pdu.getUint8(0),byte_count:pdu.getUint8(1)};if(!that.handler[tid]){offset+=9+res.pdu.byte_count;hasMore=offset<data.byteLength;continue}clearTimeout(that.handler[tid].timeout);var rHandler;if(res.pdu.fc>128){that.handler[tid].callback.reject();offset+=9+res.pdu.byte_count;hasMore=offset<data.byteLength;continue}rHandler=that._responseHandler[res.pdu.fc];if(!rHandler){var error={errCode:"noResponseHandler",fc:res.pdu.fc};that.fire("error",[error]);that.handler[tid].callback.reject(error);offset+=9+res.pdu.byte_count;hasMore=offset<data.byteLength;continue}var uHandler=that.handler[tid];res.pdu.data=rHandler(res,offset,data,uHandler.requestPacket);if(res.pdu.data){uHandler.callback.resolve(res.pdu.data,res)}else{uHandler.callback.resolve(res)}delete that.handler[tid];offset+=7+2+res.pdu.byte_count;hasMore=offset<data.byteLength}};this._responseHandler={};this._responseHandler[1]=function(response,offset,data,request){var dv=new DataView(data,offset+9,response.pdu.byte_count),fc_data=[],i,t,j,mask,dvReq=new DataView(request,0,request.byteLength),count=dvReq.getUint16(10);for(i=0;i<response.pdu.byte_count;i+=1){t=dv.getUint8(i);for(j=0;j<7;j+=1){mask=1<<j;fc_data.push(t&mask!==0);count-=1;if(count===0){break}}}return fc_data};this._responseHandler[4]=function(response,offset,data){var dv=new DataView(data,offset+7+2,response.pdu.byte_count),fc_data=[];for(var i=0;i<response.pdu.byte_count/2;i+=1){fc_data.push(dv.getUint16(i*2))}return fc_data};this._responseHandler[5]=function(response,offset,data){return null};this._responseHandler[6]=function(response,offset,data){return null};this._createMBAP=function(packet,id){var dv=new DataView(packet,0,7);dv.setUint16(MBAP_TID,id);dv.setUint16(MBAP_PID,0);dv.setUint16(MBAP_LEN,6);dv.setUint8(MBAP_UID,255)};this._createNewId=function(){this.id=(this.id+1)%1e4};this._sendPacket=function(packet){if(!this._pQueue){this._pQueue=[]}if(arguments.length>0){this._pQueue.push(packet)}if(this._isWaiting){return}if(this._pQueue.length===0){return}this._isWaiting=true;var that=this;chrome.sockets.tcp.send(this.socketId,this._pQueue.shift(),function(){that._isWaiting=false;that._sendPacket()})};this._setCallbackHandler=function(handler,packet,id){var that=this;this.handler[id]={callback:handler,requestPacket:packet};this.handler[id].timeout=setTimeout(function(){if(that.inState("error")){handler.reject({errCode:"error"});return}that.setState("error");handler.reject({errCode:"timeout"});that.fire("error",[{errCode:"timeout"}])},this.timeout)};this._readCoils=function(regNo,regCount){var defer=$.Deferred();if(!this.inState("online")){defer.reject();return defer.promise()}var packet=new ArrayBuffer(12),body=new DataView(packet,7,5);var id=this.id;this._createMBAP(packet,id);body.setUint8(BODY_FC,READ_COILS);body.setUint16(BODY_START,regNo);body.setUint16(BODY_COUNT,regCount);var data=new DataView(packet,0,12);this._setCallbackHandler(defer,packet,id);this._createNewId();this._sendPacket(packet);return defer.promise()};this._readInputRegisters=function(regNo,regCount){var defer=$.Deferred();if(!this.inState("online")){defer.reject();return defer.promise()}var packet=new ArrayBuffer(12),body=new DataView(packet,7,5),id=this.id;this._createMBAP(packet,id);body.setUint8(BODY_FC,READ_INPUT_REGISTERS);body.setUint16(BODY_START,regNo);body.setUint16(BODY_COUNT,regCount);this._setCallbackHandler(defer,packet,id);this._createNewId();this._sendPacket(packet);return defer.promise()};this._writeSingleCoil=function(addr,value){var defer=$.Deferred();if(!this.inState("online")){defer.reject();return defer.promise()}var packet=new ArrayBuffer(12),body=new DataView(packet,7,5),id=this.id;this._createMBAP(packet,id);body.setUint8(BODY_FC,WRITE_SINGLE_COIL);body.setUint16(BODY_START,addr);body.setUint16(BODY_COUNT,value?65280:0);this._setCallbackHandler(defer,packet,id);this._createNewId();this._sendPacket(packet);return defer.promise()};this._writeSingleRegister=function(regNo,value){var defer=$.Deferred();if(!this.inState("online")){defer.reject();return defer.promise()}var packet=new ArrayBuffer(12),body=new DataView(packet,7,5),id=this.id;this._createMBAP(packet,id);body.setUint8(BODY_FC,WRITE_SINGLE_REGISTER);body.setUint16(BODY_START,regNo);body.setUint16(BODY_COUNT,value);this._setCallbackHandler(defer,packet,id);this._createNewId();this._sendPacket(packet);return defer.promise()};chrome.sockets.tcp.onReceive.addListener(this._receiveListener)};ModbusClient.inherits(StateMachine);ModbusClient.method("readCoils",function(regNo,regCount){return this._readCoils(regNo,regCount)});ModbusClient.method("readInputRegisters",function(regNo,regCount){return this._readInputRegisters(regNo,regCount)});ModbusClient.method("writeSingleCoil",function(regNo,value){return this._writeSingleCoil(regNo,value)});ModbusClient.method("writeSingleRegister",function(regNo,value){return this._writeSingleRegister(regNo,value)});ModbusClient.method("connect",function(host,port){this.host=host;this.port=port;var that=this;var connect=function(){console.log("ModbusClient","Establishing connection.",that.socketId,that.host,that.port);chrome.sockets.tcp.connect(that.socketId,that.host,that.port,function(result){if(result!==0){console.log("ModbusClient","Connection failed.",result);that.fire("connect_error",{errCode:"connectionError",result:result});return}that.setState("online");console.log("ModbusClient","Connection successfull.");that.fire("connected")})};if(!this.inState("init")){connect();return this}console.log("ModbusClient","No socketId provided, creating socket.");chrome.sockets.tcp.create({},function(createInfo){console.log("ModbusClient","Socket created.",createInfo);that.socketId=createInfo.socketId;chrome.sockets.tcp.onReceiveError.addListener(function(){console.log("ModbusClient","OnReceiveError called.");that.setState("error");that.fire("error")});connect()});return this});ModbusClient.method("disconnect",function(){var that=this;console.log("ModbusClient","Disconnecting client.");chrome.sockets.tcp.disconnect(this.socketId,function(){console.log("ModbusClient","Client disconnected.");that.setState("offline");that.fire("disconnected")});return this});ModbusClient.method("reconnect",function(){var that=this;console.log("ModbusClient","Reconnecting client.");chrome.sockets.tcp.setPaused(this.socketId,false,function(){console.log("ModbusClient","Socket unpaused.");chrome.sockets.tcp.disconnect(that.socketId,function(){console.log("ModbusClient","Client disconnected.");chrome.sockets.tcp.connect(that.socketId,that.host,that.port,function(res){if(res!==0&&that.inState("error")){console.log("ModbusClient","Reconnecting failed.");that.fire("error",[{errCode:"reconnectionFailed",result:res}]);return}if(res!==0&&that.inState("offline")){console.log("ModbusClient","Connection failed.");that.fire("connect_error",[{errCode:"connectionError",result:res}]);return}that.setState("online");console.log("ModbusClient","Connection successfull.");that.fire("connected")})})})});ModbusLoop=function(client,duration){if(!(this instanceof ModbusLoop)){return new ModbusLoop(client,duration)}StateMachine.call(this,"stop");if(!client){throw new Error("No Modbus client defined!")}this._client=client;this._duration=duration||0;this._handler={};this._counter=-1;this._id=0;this._exTime=1e7;this._client.on("error",function(){this.stop()}.bind(this));this._client.on("disconnected",function(){this.stop()}.bind(this));this._confirmTermination=function(){if(this._counter===-1){return}for(var i in this._handler){if(!this._handler[i].executed){this.stop();this.fire("error",[{errCode:"loopOutOfSync"}]);return}}};this._resetExecutionFlags=function(){for(var i in this._handler){this._handler[i].executed=false}};this._callHandlers=function(){for(var i in this._handler){this._handler[i].func()}};var that=this;this._startLoop=function(){console.log("ModbusLoop","No duration, starting free loop.");this._freeLoop=function(){if(!that.inState("start")){return}var start=(new Date).getTime(),cntr=that._id,allHandler=[],finishHandler=function(){cntr-=1;if(cntr===0){var end=(new Date).getTime();that._exTime=end-start;for(var j in allHandler){that.off(allHandler[j])}that._freeLoop()}};for(var i in that._handler){var h=that.on(i,finishHandler);allHandler.push(h)}that._callHandlers()}};this._startLoopWithDuration=function(){console.log("ModbusLoop","Starting loop with duration",this._duration);this._iid=setInterval(function(){if(!that.inState("start")){return}that._confirmTermination();that._resetExecutionFlags();that._callHandlers();that._counter=(that._counter+1)%1e3},this._duration)};this.on("state_changed",function(oldState,newState){if(newState==="start"){if(this._duration){this._startLoopWithDuration()}else{this._startLoop()}}if(newState==="stop"){if(this._iid){clearInterval(this.iid)}}})};ModbusLoop.inherits(StateMachine);ModbusLoop.method("readCoils",function(start,count){var that=this,id=this._id,handler=function(){that._client.readCoils(start,count).then(function(data){that._handler[id].executed=true;that.fire(id,data)}).fail(function(){that.stop();that.fire("error",[{errCode:id,args:arguments}])})};this._handler[id]={};this._handler[id].func=handler;this._handler[id].executed=false;return this._id++});ModbusLoop.method("readInputRegisters",function(start,count){var that=this,id=this._id,handler=function(){that._client.readInputRegisters(start,count).then(function(){that._handler[id].executed=true;that.fire(id,arguments)}).fail(function(){that.stop();that.fire("error",[{errCode:id,args:arguments}])})};this._handler[id]={};this._handler[id].func=handler;this._handler[id].executed=false;return this._id++});ModbusLoop.method("writeSingleCoil",function(reg,value){var that=this,id=this._id,handler=function(){that._client.writeSingleCoil(reg,value).then(function(){that._handler[id].executed=true;that.fire(id,arguments)}).fail(function(){that.stop();that.fire("error",[{errCode:id,args:arguments}])})};this._handler[id]={};this._handler[id].func=handler;this._handler[id].executed=false;return this._id++});ModbusLoop.method("writeSingleRegister",function(reg,value){var that=this,id=this._id,handler=function(){that._client.writeSingleRegister(reg,value).then(function(){that._handler[id].executed=true;that.fire(id,arguments)}).fail(function(){that.stop();that.fire("error",[{errCode:id,args:arguments}])})};this._handler[id]={};this._handler[id].func=handler;this._handler[id].executed=false;return this._id++});ModbusLoop.method("createRegister",function(cls,startReg){console.log("ModbusLoop","Create Single Command/Status Register.");var reg=new cls(this._client,startReg),id=this.readInputRegisters(startReg,2);this.on(id,function(data){reg.update_status(data[0],data[1])});return reg});ModbusLoop.method("createMultipleRegisters",function(clsses,startReg,count){console.log("ModbusLoop","Create multiple Command/Status Register.",arguments);var ret=[],j=0,id;for(var i=0;i<count;i+=1){ret.push(new clsses[j](this._client,startReg+i*4));if(j<clsses.length-1){j+=1}}console.log("ModbusLoop","Register created",ret);id=this.readInputRegisters(startReg,count*4);console.log("ModbusLoop","Loop update id is",id);this.on(id,function(data){for(var k=0;k<count;k+=1){ret[k].update_status(data[k*4],data[k*4+1])}});return ret});ModbusLoop.method("remove",function(id){if(!this._handler[id]){return false}delete this._handler[id];return true});ModbusLoop.method("start",function(){this._counter=-1;this.setState("start");if(!this._duration){this._freeLoop()}});ModbusLoop.method("stop",function(){this.setState("stop")});var ModbusServerClient=function(info,server,simDelay){if(!(this instanceof ModbusServerClient)){return new ModbusServerClient(info,server,simDelay)}this._info=info;this._client_socket_id=info.clientSocketId;this._server=server;this._simDelay=simDelay||0;this._queue=[];this._get_requests=function(data){var ret=[],offset=0,header,body,request;console.log("ModbusServerClient","Processing request with length",data.byteLength);while(offset<data.byteLength){console.log("ModbusServerClient","Getting request at message offset",offset);header=new DataView(data,offset,7);request={header:{tid:header.getUint16(0),pid:header.getUint16(2),len:header.getUint16(4),uid:header.getUint8(6)}};console.log("ModbusServerClient","Request header",request.header);offset+=7;body=new DataView(data,offset,request.header.len-1);request.body={fc:body.getUint8(0)};console.log("ModbusServerClient","Function Code of request is",request.body.fc);if(request.body.fc===4){request.body.adr=body.getUint16(1);request.body.cnt=body.getUint16(3)}if(request.body.fc===6){request.body.adr=body.getUint16(1);request.body.val=body.getUint16(3)}console.log("ModbusServerClient","Rest of the body looks like this",request.body);offset+=request.header.len-1;ret.push(request)}return ret};this._handle_request=function(request){console.log("ModbusServerClient","Handling request.");var ret_buffer,ret_head_dv,ret_body_dv;if(request.body.fc===4){console.log("ModbusServerClient","Preparing response for fc 0x04");ret_buffer=new ArrayBuffer(7+2+request.body.cnt*2);ret_head_dv=new DataView(ret_buffer,0,7);ret_head_dv.setUint16(0,request.header.tid);ret_head_dv.setUint16(2,request.header.pid);ret_head_dv.setUint16(4,1+2+request.body.cnt*2);ret_head_dv.setUint8(6,request.header.uid);ret_body_dv=new DataView(ret_buffer,7,2+request.body.cnt*2);console.log("ModbusServerClient","Request body count",request.body.cnt);ret_body_dv.setUint8(0,4);ret_body_dv.setUint8(1,request.body.cnt*2);for(var i=0;i<request.body.cnt;i+=1){console.log("ModbusServerClient","InputRegister with index",request.body.adr+i,"has value",this._server.getInputRegister(request.body.adr+i));ret_body_dv.setUint16(2+i*2,this._server.getInputRegister(request.body.adr+i))}this._server.fire("read_input_registers",[request.body.adr,request.body.cnt])}if(request.body.fc===6){ret_buffer=new ArrayBuffer(12);ret_head_dv=new DataView(ret_buffer,0,7);ret_head_dv.setUint16(0,request.header.tid);ret_head_dv.setUint16(2,request.header.pid);ret_head_dv.setUint16(4,request.header.len);ret_head_dv.setUint8(6,request.header.uid);ret_body_dv=new DataView(ret_buffer,7,5);console.log("ModbusServerClient","Writing Input Register");this._server.setInputRegister(request.body.adr,request.body.val);this._server.fire("write_single_register",[request.body.adr,request.body.val]);ret_body_dv.setUint8(0,6);ret_body_dv.setUint16(1,request.body.adr);ret_body_dv.setUint16(3,request.body.val)}return ret_buffer};this._send_answer=function(buffer){var defer=$.Deferred();console.log("ModbusServerClient","Sending answer to the client.");if(!this._simDelay){console.log("ModbusServerClient","Sending answer right away, no SimMode.");chrome.sockets.tcp.send(this._client_socket_id,buffer,function(ret){if(ret<0){console.error("ModbusServerClient","Sending an answer failed.");defer.reject();return}console.log("ModbusServerClient","Sending answer succeeded.");defer.resolve()})}else{console.log("ModbusServerClient","Holding back answer for",this._simDelay,"ms (SimMode)");var that=this;setTimeout(function(){chrome.sockets.tcp.send(that._client_socket_id,buffer,function(ret){if(ret<0){console.error("ModbusServerClient","Sending an answer failed.");defer.reject();return}console.log("ModbusServerClient","Sending answer succeeded.");defer.resolve()})},this._simDelay)}return defer.promise()};this._handle_message=function(info){console.log("ModbusServerClient","Receiving new data.");var requests=this._get_requests(info.data),send_q=[],ret=null;console.log("ModbusServerClient","Current data package contains",requests.length," request");for(var i=0;i<requests.length;i+=1){ret=this._handle_request(requests[i]);send_q.push(this._send_answer(ret))}$.when(send_q).then(function(){console.log("ModbusServerClient","All requests handled.")}).fail(function(){console.log("ModbusServerClient","Handling requests failed.")})};var that=this;chrome.sockets.tcp.setPaused(this._client_socket_id,false,function(){console.log("ModbusServerClient","Client socket",that._client_socket_id,"unpaused.")});chrome.sockets.tcp.onReceive.addListener(this._handle_message.bind(this))};ModbusServerClient.method("getInfo",function(){return this._client});ServerRegister=function(start,server){if(!(this instanceof ServerRegister)){return new ServerRegister(start,server)}Events.call(this);this._start=start;this._server=server;console.log("ServerRegister","Initialized with",this._start);this._command={count:0,id:0,ex:false};this._status={stateflag_1:0,stateflag_2:0,stateflag_3:0,stateflag_4:0,stateword:0,command_counter:0,command_ex:0,command_fail:0,arg:0};this._update_status=function(){var s=0;s+=this._status.stateflag_1?1:0;s+=this._status.stateflag_2?2:0;s+=this._status.stateflag_3?4:0;s+=this._status.stateflag_4?8:0;s+=this._status.stateword<<4;s+=this._status.command_counter<<11;s+=this._status.command_ex<<14;s+=this._status.command_fail<<15;this._server.setInputRegister(this._start,s);this._server.setInputRegister(this._start+1,this._status.arg);console.log("ServerRegister","Updated Server Register",s,s.toString(16),s.toString(2))};this._evaluate=function(val){this._command.count=(val&7)>>0;this._command.id=(val&32760)>>3;this._command.ex=(val&32768)>>15;if(!this._command.ex){console.log("ServerRegister","No execution flag.");return}console.log("ServerRegister","Firing event","execute_"+this._command.id,this);this.fire("execute_"+this._command.id);console.log("ServerRegister","New command",this._command);this._status.command_counter=this._command.count;this._status.command_ex=1;console.log("ServerRegister","Updated status",this._status);this._update_status()};this._server.on("write_single_register",function(start,val){console.log("ServerRegister","WriteSingleRegister executed.");if(start!==this._start+2){console.log("ServerRegister","Not this command register.",start,this._start+2);return}console.log("ServerRegister","Update on this command register.");this._evaluate(val)}.bind(this))};ServerRegister.inherits(Events);ModbusServer=function(host,port,simDelay){if(!(this instanceof ModbusServer)){return new ModbusServer(host,port,simDelay)}Events.call(this);this._host=host;this._port=port;this._simDelay=simDelay;this._socket_id=null;this._is_connected=false;this._clients=[];this._input_register_offset=0;this._input_register=[];this._coils=[];this._create_new_client=function(info){console.log("ModbusServer",this);console.log("ModbusServer","New client created.");var new_client=new ModbusServerClient(info,this,this._simDelay);this.fire("client_accepted",[new_client]);this._clients.push(new_client)}};ModbusServer.inherits(Events);ModbusServer.method("getClients",function(){return this._clients});ModbusServer.method("start",function(){var defer=$.Deferred(),that=this;console.log("ModbusServer","Start called.");chrome.sockets.tcpServer.create(function(createInfo){that._socket_id=createInfo.socketId;console.log("ModbusServer","Socket created.",that._socket_id);console.log("ModbusServer","Listening on socket",that._socket_id,"and host",that._host,":",that._port);chrome.sockets.tcpServer.listen(that._socket_id,that._host,that._port,function(res){if(res<0){console.error("ModbusServer","Listening to",that._host,that._port,"failed",res);defer.reject({errCode:"notListening",result:res});chrome.sockets.tcpServer.close(that._socket_id,function(){});return}console.log("ModbusServer","Server is listening on",that._host,that._port);chrome.sockets.tcpServer.onAccept.addListener(that._create_new_client.bind(that));defer.resolve()})})});ModbusServer.method("stop",function(){console.log("ModbusServer","Server stopped.");chrome.sockets.tcpServer.close(this._socket_id,function(){})});ModbusServer.method("setInputRegisterOffset",function(offset){this._input_register_offset=offset;return this});ModbusServer.method("setInputRegister",function(adr,value){this._input_register[this._input_register_offset+adr]=value;return this});ModbusServer.method("getInputRegister",function(adr){if(!this._input_register[this._input_register_offset+adr]){this._input_register[this._input_register_offset+adr]=0}return this._input_register[this._input_register_offset+adr]});ModbusServer.method("createNewRegister",function(start){return new ServerRegister(start,this)});ModbusServer.method("createCustomRegister",function(cls,start){return new cls(start,this)});Register=function(client,start){if(!(this instanceof Register)){return new Register(client,start)}Events.call(this);this.client=client;this.start=start;this.status={stateflag_1:false,stateflag_2:false,stateflag_3:false,stateflag_4:false,state:0,cmd_count:0,cmd_ex:false,cmd_err:false,arg:0};this._inExecution=false;this._queue=[];this._cmd_id=0;this._execute=function(command,param){console.log("Register","Queing an new command.",command,param);var defer=$.Deferred();this._queue.push({deferred:defer,command:command,param:param});this._flush();return defer.promise()};this._flush=function(){console.log("Register","Flushing latest command.");if(this._queue.length===0){console.log("Register","Nothing to flush.");return}if(this._inExecution){console.log("Register","Waiting, currently in execution state.");return}this._inExecution=true;var first=this._queue.pop(),command=first.command,param=first.param,defer=first.deferred;this._cmd_id=(this._cmd_id+1)%8;var cmd=command<<3,ex_flag=1<<15,that=this;this.cmd_reg=this._cmd_id+cmd+ex_flag;console.log("Register","Writing to modbus server.",this.cmd_reg);this.client.writeSingleRegister(this.start+2,this.cmd_reg).fail(function(err){console.error("Register","Sending command to PLC failed.",err);defer.reject({errCode:"modbusError"});that._inExecution=false;that._flush()}).then(function(){console.log("Register","Sending command to PLC was successfull.");var handler_id,timeout_id,update_count=0;timeout_id=setTimeout(function(){console.error("Register","PLC did not executed the command inside the timeframe.");defer.reject({errCode:"timeout",update_count:update_count});that._inExecution=false;that._flush()},5e3);handler_id=that.on("update_status",function(){update_count+=1;if(that.status.cmd_count===that._cmd_id&&that.status.cmd_ex){console.log("Register","Command executed.",that.status);that.off(handler_id);clearTimeout(timeout_id);if(!that.status.cmd_err){console.log("Register","PLC executed command successfully.");defer.resolve(that.status.arg)}else{console.error("Register","PLC responded with execution error.");defer.reject({errCode:"plcError"})}that._inExecution=false;that._flush()}})})}};Register.inherits(Events);Register.method("update_status",function(status_reg,status_arg){var s_1=1,s_2=2,s_3=4,s_4=8,s_state=2032,s_cid=14336,s_cide=16384,s_cidf=32768;this.status.stateflag_1=(status_reg&s_1)>>0;this.status.stateflag_2=(status_reg&s_2)>>1;this.status.stateflag_3=(status_reg&s_3)>>2;this.status.stateflag_4=(status_reg&s_4)>>3;this.status.state=(status_reg&s_state)>>4;this.status.cmd_count=(status_reg&s_cid)>>11;this.status.cmd_ex=(status_reg&s_cide)>>14;this.status.cmd_err=(status_reg&s_cidf)>>15;this.status.arg=status_arg;this.fire("update_status")})})();