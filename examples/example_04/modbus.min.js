(function(){Function.prototype.method=function(name,func){this.prototype[name]=func;return this};Function.method("inherits",function(superCtor){this.super_=superCtor;this.prototype=Object.create(superCtor.prototype,{constructor:{value:this,enumerable:false,writable:true,configurable:true}});return this});var Events=function(){if(!(this instanceof Events)){return new Events}this._cbList={}};Events.method("fire",function(name,args){if(!this._cbList[name]){return}for(var i in this._cbList[name]){this._cbList[name][i].apply(this,args)}});Events.method("fireLater",function(name,args){if(args===undefined){args=[]}return function(){var a=args.concat(Array.prototype.slice.call(arguments,0));this.fire(name,a.length>0?a:undefined)}.bind(this)});Events.method("on",function(name,func){if(!this._cbList[name]){this._cbList[name]=[]}this._cbList[name].push(func);return{name:name,index:this._cbList[name].length-1}});Events.method("off",function(id){this._cbList[id.name].splice(id.index);return this});StateMachine=function(initState){if(!(this instanceof StateMachine)){return new StateMachine(initState)}Events.call(this);this._state=initState};StateMachine.inherits(Events);StateMachine.method("inState",function(state){return this._state===state});StateMachine.method("getState",function(){return this._state});StateMachine.method("setState",function(newState){var oldState=this._state;this._state=newState;this.fire("state_changed",[oldState,newState]);return this});var MBAP_TID=0,MBAP_PID=2,MBAP_LEN=4,MBAP_UID=6,BODY_FC=0,BODY_START=1,BODY_COUNT=3,READ_COILS=1,READ_HOLDING_REGISTERS=3,READ_INPUT_REGISTERS=4,WRITE_SINGLE_COIL=5,WRITE_SINGLE_REGISTER=6;var ModbusRequest=function(id,length){if(!(this instanceof ModbusRequest)){return new ModbusRequest(id)}this.id=id;this.length=length;this.deferred=$.Deferred();this.packet=new ArrayBuffer(length);this.header=new DataView(this.packet,0,7);this.timeout=null;this.setTID(id).setPID(0).setLength(length-6).setUID(255)};ModbusRequest.method("setTID",function(id){this.header.setUint16(MBAP_TID,id);this.id=id;return this});ModbusRequest.method("setPID",function(pid){this.header.setUint16(MBAP_PID,pid);this.pid=pid;return this});ModbusRequest.method("setLength",function(len){this.header.setUint16(MBAP_LEN,len);this.length=len;return this});ModbusRequest.method("setUID",function(uid){this.header.setUint8(MBAP_UID,uid);this.uid=uid;return this});ModbusRequest.method("getPromise",function(){return this.deferred.promise()});ModbusRequest.method("reject",function(){this.deferred.reject.apply(null,arguments);return this});ModbusRequest.method("resolve",function(){this.deferred.resolve.apply(null,arguments);return this});ModbusRequest.method("setTimeout",function(timeout){this.timeout=timeout;return this});var ReadCoilsRequest=function(id,start,count){if(!(this instanceof ReadCoilsRequest)){return new ReadCoilsRequest(id,start,count)}ModbusRequest.call(this,id,12);this.start=start;this.count=count;this.body=new DataView(this.packet,7,5);this.body.setUint8(BODY_FC,READ_COILS);this.setStart(start).setCount(count)};ReadCoilsRequest.inherits(ModbusRequest);ReadCoilsRequest.method("setStart",function(start){this.body.setUint16(BODY_START,start);this.start=start;return this});ReadCoilsRequest.method("setCount",function(count){this.body.setUint16(BODY_COUNT,count);this.count=count;return this});ReadCoilsRequest.method("handleResponse",function(data,offset){var mbap=new DataView(data,offset,7),pdu=new DataView(data,offset+7,2),fc=pdu.getUint8(0),byte_count=pdu.getUint8(1);if(fc>128){this.deferred.reject({errCode:"serverError"});return false}var dv=new DataView(data,offset+9,byte_count),fc_data=[],i,t,j,mask,count=this.count,fc_data=[];for(i=0;i<this.count;i+=1){t=dv.getUint8(i);for(j=0;j<7;j+=1){mask=1<<j;fc_data.push(t&mask!==0);count-=1;if(count===0){break}}}this.deferred.resolve(fc_data,this);return true});var ReadHoldingRegistersRequest=function(id,start,count){if(!(this instanceof ReadHoldingRegistersRequest)){return new ReadHoldingRegistersRequest(id,start,count)}ModbusRequest.call(this,id,12);this.start=start;this.count=count;this.body=new DataView(this.packet,7,5);this.body.setUint8(BODY_FC,READ_HOLDING_REGISTERS);this.setStart(start).setCount(count)};ReadHoldingRegistersRequest.inherits(ModbusRequest);ReadHoldingRegistersRequest.method("setStart",function(start){this.body.setUint16(BODY_START,start);this.start=start;return this});ReadHoldingRegistersRequest.method("setCount",function(count){this.body.setUint16(BODY_COUNT,count);this.count=count;return this});ReadHoldingRegistersRequest.method("handleResponse",function(data,offset){var mbap=new DataView(data,offset,7),pdu=new DataView(data,offset+7,2),fc=pdu.getUint8(0),byte_count=pdu.getUint8(1);if(fc>128){this.deferred.reject({errCode:"serverError"});return false}var dv=new DataView(data,offset+7+2,byte_count),fc_data=[];for(var i=0;i<byte_count/2;i+=1){fc_data.push(dv.getUint16(i*2))}this.deferred.resolve(fc_data,this);return true});var ReadInputRegistersRequest=function(id,start,count){if(!(this instanceof ReadInputRegistersRequest)){return new ReadInputRegistersRequest(id,start,count)}ModbusRequest.call(this,id,12);this.start=start;this.count=count;this.body=new DataView(this.packet,7,5);this.body.setUint8(BODY_FC,READ_INPUT_REGISTERS);this.setStart(start).setCount(count)};ReadInputRegistersRequest.inherits(ModbusRequest);ReadInputRegistersRequest.method("setStart",function(start){this.body.setUint16(BODY_START,start);this.start=start;return this});ReadInputRegistersRequest.method("setCount",function(count){this.body.setUint16(BODY_COUNT,count);this.count=count;return this});ReadInputRegistersRequest.method("handleResponse",function(data,offset){var mbap=new DataView(data,offset,7),pdu=new DataView(data,offset+7,2),fc=pdu.getUint8(0),byte_count=pdu.getUint8(1);if(fc>128){this.deferred.reject({errCode:"serverError"});return false}var dv=new DataView(data,offset+7+2,byte_count),fc_data=[];for(var i=0;i<byte_count/2;i+=1){fc_data.push(dv.getUint16(i*2))}this.deferred.resolve(fc_data,this);return true});WriteSingleCoilRequest=function(id,address,value){if(!(this instanceof WriteSingleCoilRequest)){return new WriteSingleCoildRequest(id,address,value)}ModbusRequest.call(this,id,12);this.address=address;this.value=value;this.body=new DataView(this.packet,7,5);this.body.setUint8(BODY_FC,WRITE_SINGLE_COIL);this.setAddress(address).setValue(value)};WriteSingleCoilRequest.inherits(ModbusRequest);WriteSingleCoilRequest.method("setAddress",function(address){this.body.setUint16(BODY_START,address);this.address=address;return this});WriteSingleCoilRequest.method("setValue",function(value){this.body.setUint16(BODY_COUNT,value?65280:0);this.value=value;return this});WriteSingleCoilRequest.method("handleResponse",function(data,offset){var mbap=new DataView(data,offset,7),pdu=new DataView(data,offset+7,2),fc=pdu.getUint8(0),byte_count=pdu.getUint8(1);if(fc>128){this.deferred.reject({errCode:"serverError"});return false}this.deferred.resolve(this);return true});WriteSingleRegisterRequest=function(id,address,value){if(!(this instanceof WriteSingleRegisterRequest)){return new WriteSingleRegisterRequest(id,address,value)}ModbusRequest.call(this,id,12);this.address=address;this.value=value;this.body=new DataView(this.packet,7,5);this.body.setUint8(BODY_FC,WRITE_SINGLE_REGISTER);this.setAddress(address).setValue(value)};WriteSingleRegisterRequest.inherits(ModbusRequest);WriteSingleRegisterRequest.method("setAddress",function(address){this.body.setUint16(BODY_START,address);this.address=address;return this});WriteSingleRegisterRequest.method("setValue",function(value){this.body.setUint16(BODY_COUNT,value);this.value=value;return this});WriteSingleRegisterRequest.method("handleResponse",function(data,offset){var mbap=new DataView(data,offset,7),pdu=new DataView(data,offset+7,2),fc=pdu.getUint8(0),byte_count=pdu.getUint8(1);if(fc>128){this.deferred.reject({errCode:"serverError"});return false}this.deferred.resolve(this);return true});ModbusClient=function(timeout){if(!(this instanceof ModbusClient)){return new ModbusClient(timeout)}StateMachine.call(this,"init");this.host="localhost";this.port=502;this.timeout=timeout||5e3;this.id=0;this._requests={};this._requestQueue=[];var that=this;this.on("state_changed",function(oldState,newState){if(oldState==="error"&&newState==="online"){this._sendPacket()}});this.on("error",function(){for(var i in this._pQueue){this._requestQueue[i].reject({errCode:"connectionError"})}});this._receiveListener=function(resp){var offset=0,data=resp.data,request;while(offset<data.byteLength){var mbap=new DataView(data,offset+0,7),tid=mbap.getUint16(0),pdu=new DataView(data,offset+7,2),byte_count=pdu.getUint8(1);request=this._requests[tid];if(!request){offset+=9+byte_count;continue}clearTimeout(request.timeout);request.handleResponse(data,offset);delete this._requests[tid];offset+=7+2+byte_count}};this._createNewId=function(){this.id=(this.id+1)%1e4;return this.id};this._sendPacket=function(request){if(arguments.length>0){this._requestQueue.push(request)}if(this._isWaiting||!this.inState("online")){return}if(this._requestQueue.length===0){return}this._isWaiting=true;var request=this._requestQueue.shift();var timeout=setTimeout(function(){if(this.inState("error")){request.reject({errCode:"error"});return}this.setState("error");request.reject({errCode:"timeout"});this.fire("error",[{errCode:"timeout"}]);delete this._requests[request.id]}.bind(this),this.timeout);request.setTimeout(timeout);chrome.sockets.tcp.send(this.socketId,request.packet,function(sendInfo){if(sendInfo.resultCode<0){console.log("ModbusClient","A error occured while sending packet.",sendInfo.resultCode);this.setState("error");this._isWaiting=false;return}this._isWaiting=false;this._sendPacket()}.bind(this))};chrome.sockets.tcp.onReceive.addListener(this._receiveListener.bind(this))};ModbusClient.inherits(StateMachine);ModbusClient.method("readCoils",function(start,count){var request=new ReadCoilsRequest(this._createNewId(),start,count);if(!this.inState("online")){request.reject({errCode:"offline"});return request.getPromise()}this._requests[request.id]=request;this._sendPacket(request);return request.getPromise()});ModbusClient.method("readHoldingRegisters",function(start,count){var request=new ReadHoldingRegistersRequest(this._createNewId(),start,count);if(!this.inState("online")){request.reject({errCode:"offline"});return request.getPromise()}this._requests[request.id]=request;this._sendPacket(request);return request.getPromise()});ModbusClient.method("readInputRegisters",function(start,count){var request=new ReadInputRegistersRequest(this._createNewId(),start,count);if(!this.inState("online")){request.reject({errCode:"offline"});return request.getPromise()}this._requests[request.id]=request;this._sendPacket(request);return request.getPromise()});ModbusClient.method("writeSingleCoil",function(address,value){var request=new WriteSingleCoilRequest(this._createNewId(),address,value);if(!this.inState("online")){request.reject({errCode:"offline"});return request.getPromise()}this._requests[request.id]=request;this._sendPacket(request);return request.getPromise()});ModbusClient.method("writeSingleRegister",function(address,value){var request=new WriteSingleRegisterRequest(this._createNewId(),address,value);if(!this.inState("online")){request.reject({errCode:"offline"});return request.getPromise()}this._requests[request.id]=request;this._sendPacket(request);return request.getPromise()});ModbusClient.method("connect",function(host,port){this.host=host;this.port=port;var that=this;var connect=function(){console.log("ModbusClient","Establishing connection.",that.socketId,that.host,that.port);chrome.sockets.tcp.connect(that.socketId,that.host,that.port,function(result){if(result!==0){console.log("ModbusClient","Connection failed.",result);that.fire("connect_error",[{errCode:"connectionError",result:result}]);return}that.setState("online");console.log("ModbusClient","Connection successfull.");that.fire("connected")})};if(!this.socketId){console.log("ModbusClient","No socketId provided, creating socket.");chrome.sockets.tcp.create({},function(createInfo){console.log("ModbusClient","Socket created.",createInfo);that.socketId=createInfo.socketId;chrome.sockets.tcp.onReceiveError.addListener(function(){console.log("ModbusClient","OnReceiveError called.");that.setState("error");that.fire("error")});connect()})}else{connect()}return this});ModbusClient.method("disconnect",function(){var that=this;console.log("ModbusClient","Disconnecting client.");chrome.sockets.tcp.disconnect(this.socketId,function(){console.log("ModbusClient","Client disconnected.");that.setState("offline");that.fire("disconnected")});return this});ModbusClient.method("reconnect",function(){var that=this;console.log("ModbusClient","Reconnecting client.");chrome.sockets.tcp.setPaused(this.socketId,false,function(){console.log("ModbusClient","Socket unpaused.");chrome.sockets.tcp.disconnect(that.socketId,function(){console.log("ModbusClient","Client disconnected.");chrome.sockets.tcp.connect(that.socketId,that.host,that.port,function(res){if(res!==0&&that.inState("error")){console.log("ModbusClient","Reconnecting failed.");that.fire("error",[{errCode:"reconnectionFailed",result:res}]);return}if(res!==0&&that.inState("offline")){console.log("ModbusClient","Connection failed.");that.fire("connect_error",[{errCode:"connectionError",result:res}]);return}that.setState("online");console.log("ModbusClient","Connection successfull.");that.fire("connected")})})})});var RangeList=function(){if(!(this instanceof RangeList)){return new RangeList}this._list=[];this._shrink=function(){if(this._list.length===1){return this}var next,j=0;while(j<this._list.length-1){cur=this._list[j];next=this._list[j+1];if(cur.end>=next.start-1){cur.end=Math.max(cur.end,next.end);this._list.splice(j+1,1);continue}j+=1}}};RangeList.method("merge",function(start,end){if(end<=start){return this}if(this._list.length===0){this._list.push({start:start,end:end});return this}for(var i in this._list){cur=this._list[i];if(cur.start>end){this._list.splice(i,0,{start:start,end:end});this._shrink();return this}if(cur.start>=start&&cur.end>start){if(cur.end<end){cur.start=start;cur.end=start+end;this._shrink();return this}if(cur.end>=end){cur.start=start;cur.end=cur.end;this._shrink();return this}}if(cur.start<start&&cur.end>start){if(cur.end>=end){this._shrink();return this}if(cur.end<end){cur.end=end;this._shrink();return this}}}this._list.push({start:start,end:end});this._shrink();return this});RangeList.method("getList",function(){return this._list});ModbusLoop=function(client,duration){if(!(this instanceof ModbusLoop)){return new ModbusLoop(client,duration)}StateMachine.call(this,"stop");this._client=client;this._readInputRegistersList=new RangeList;this._readHoldingRegistersList=new RangeList;this._readCoilList=new RangeList;this._inputRegisters=[];this._holdingRegisters=[];this._coils=[];this._client.on("disconnected",function(){this.setState("stop")}.bind(this));this._client.on("error",function(){this.setState("stop")}.bind(this));this._updateInputRegisters=function(start,data){for(var i=0;i<data.length;i+=1){this._inputRegisters[start+i]=data[i]}};this._updateHoldingRegisters=function(start,data){for(var i=0;i<data.length;i+=1){this._holdingRegisters[start+i]=data[i]}};this._executeInputRegistersLoop=function(){var promisses=[],cur,promise,inputsList,retPromise;inputsList=this._readInputRegistersList.getList();for(var i=0;i<inputsList.length;i+=1){cur=inputsList[i];promise=this._client.readInputRegisters(cur.start,cur.end-cur.start);promisses.push(promise)}retPromise=$.when.apply(this,promisses).then(function(){var args;if(promisses.length===1){args=[arguments]}else{args=arguments}for(var i in args){this._updateInputRegisters(args[i][1].start,args[i][0])}}.bind(this));return retPromise};this._executeHoldingRegistersLoop=function(){var promisses=[],cur,promise,inputsList,retPromise;inputsList=this._readHoldingRegistersList.getList();for(var i=0;i<inputsList.length;i+=1){cur=inputsList[i];promise=this._client.readHoldingRegisters(cur.start,cur.end-cur.start);promisses.push(promise)}retPromise=$.when.apply(this,promisses).then(function(){var args;if(promisses.length===1){args=[arguments]}else{args=arguments}for(var i in args){this._updateHoldingRegisters(args[i][1].start,args[i][0])}}.bind(this));return retPromise};this._executeLoop=function(){if(!this.inState("running")){return}var len_1=this._readInputRegistersList.getList().length,len_2=this._readHoldingRegistersList.getList().length,len=len_1+len_2;if(len===0){setTimeout(this._executeLoop.bind(this),1e3);return}var loop_1=this._executeInputRegistersLoop(),loop_2=this._executeHoldingRegistersLoop();$.when.apply(this,[loop_1,loop_2]).then(function(){this.fire("update",[this._inputRegisters,this._holdingRegisters]);this._executeLoop()}.bind(this)).fail(function(){this.setState("stop")}.bind(this))};this.on("state_changed",function(oldState,newState){console.log("ModbusLoop","Switching from State",oldState," to State",newState)})};ModbusLoop.inherits(StateMachine);ModbusLoop.method("readInputRegisters",function(start,count){this._readInputRegistersList.merge(start,start+count);return this});ModbusLoop.method("readHoldingRegisters",function(start,count){this._readHoldingRegistersList.merge(start,start+count);return this});ModbusLoop.method("start",function(){console.log("ModbusLoop","Starting loop.");this.setState("running");this._executeLoop()});ModbusLoop.method("stop",function(){console.log("ModbusLoop","Stopping loop.");this.setState("stop")});var ModbusServerClient=function(info,server,simDelay){if(!(this instanceof ModbusServerClient)){return new ModbusServerClient(info,server,simDelay)}this._info=info;this._client_socket_id=info.clientSocketId;this._server=server;this._simDelay=simDelay||0;this._queue=[];this._get_requests=function(data){var ret=[],offset=0,header,body,request;console.log("ModbusServerClient","Processing request with length",data.byteLength);while(offset<data.byteLength){console.log("ModbusServerClient","Getting request at message offset",offset);header=new DataView(data,offset,7);request={header:{tid:header.getUint16(0),pid:header.getUint16(2),len:header.getUint16(4),uid:header.getUint8(6)}};console.log("ModbusServerClient","Request header",request.header);offset+=7;body=new DataView(data,offset,request.header.len-1);request.body={fc:body.getUint8(0)};console.log("ModbusServerClient","Function Code of request is",request.body.fc);if(request.body.fc===3){request.body.adr=body.getUint16(1);request.body.cnt=body.getUint16(3)}if(request.body.fc===4){request.body.adr=body.getUint16(1);request.body.cnt=body.getUint16(3)}if(request.body.fc===6){request.body.adr=body.getUint16(1);request.body.val=body.getUint16(3)}console.log("ModbusServerClient","Rest of the body looks like this",request.body);offset+=request.header.len-1;ret.push(request)}return ret};this._handle_request=function(request){console.log("ModbusServerClient","Handling request.");var ret_buffer,ret_head_dv,ret_body_dv;if(request.body.fc===3){console.log("ModbusServerClient","Preparing response for fc 0x03");ret_buffer=new ArrayBuffer(7+2+request.body.cnt*2);ret_head_dv=new DataView(ret_buffer,0,7);ret_head_dv.setUint16(0,request.header.tid);ret_head_dv.setUint16(2,request.header.pid);ret_head_dv.setUint16(4,1+2+request.body.cnt*2);ret_head_dv.setUint8(6,request.header.uid);ret_body_dv=new DataView(ret_buffer,7,2+request.body.cnt*2);console.log("ModbusServerClient","Request body count",request.body.cnt);ret_body_dv.setUint8(0,3);ret_body_dv.setUint8(1,request.body.cnt*2);for(var i=0;i<request.body.cnt;i+=1){console.log("ModbusServerClient","HoldingRegister with index",request.body.adr+i,"has value",this._server.getHoldingRegister(request.body.adr+i));ret_body_dv.setUint16(2+i*2,this._server.getHoldingRegister(request.body.adr+i))}this._server.fire("read_holding_registers",[request.body.adr,request.body.cnt])}if(request.body.fc===4){console.log("ModbusServerClient","Preparing response for fc 0x04");ret_buffer=new ArrayBuffer(7+2+request.body.cnt*2);ret_head_dv=new DataView(ret_buffer,0,7);ret_head_dv.setUint16(0,request.header.tid);ret_head_dv.setUint16(2,request.header.pid);ret_head_dv.setUint16(4,1+2+request.body.cnt*2);ret_head_dv.setUint8(6,request.header.uid);ret_body_dv=new DataView(ret_buffer,7,2+request.body.cnt*2);console.log("ModbusServerClient","Request body count",request.body.cnt);ret_body_dv.setUint8(0,4);ret_body_dv.setUint8(1,request.body.cnt*2);for(var i=0;i<request.body.cnt;i+=1){console.log("ModbusServerClient","InputRegister with index",request.body.adr+i,"has value",this._server.getInputRegister(request.body.adr+i));ret_body_dv.setUint16(2+i*2,this._server.getInputRegister(request.body.adr+i))}this._server.fire("read_input_registers",[request.body.adr,request.body.cnt])}if(request.body.fc===6){ret_buffer=new ArrayBuffer(12);ret_head_dv=new DataView(ret_buffer,0,7);ret_head_dv.setUint16(0,request.header.tid);ret_head_dv.setUint16(2,request.header.pid);ret_head_dv.setUint16(4,request.header.len);ret_head_dv.setUint8(6,request.header.uid);ret_body_dv=new DataView(ret_buffer,7,5);console.log("ModbusServerClient","Writing Holding Register");this._server.setHoldingRegister(request.body.adr,request.body.val);this._server.fire("write_single_register",[request.body.adr,request.body.val]);ret_body_dv.setUint8(0,6);ret_body_dv.setUint16(1,request.body.adr);ret_body_dv.setUint16(3,request.body.val)}return ret_buffer};this._send_answer=function(buffer){var defer=$.Deferred();console.log("ModbusServerClient","Sending answer to the client.");if(!this._simDelay){console.log("ModbusServerClient","Sending answer right away, no SimMode.");chrome.sockets.tcp.send(this._client_socket_id,buffer,function(ret){if(ret<0){console.error("ModbusServerClient","Sending an answer failed.");defer.reject();return}console.log("ModbusServerClient","Sending answer succeeded.");defer.resolve()})}else{console.log("ModbusServerClient","Holding back answer for",this._simDelay,"ms (SimMode)");var that=this;setTimeout(function(){chrome.sockets.tcp.send(that._client_socket_id,buffer,function(ret){if(ret<0){console.error("ModbusServerClient","Sending an answer failed.");defer.reject();return}console.log("ModbusServerClient","Sending answer succeeded.");defer.resolve()})},this._simDelay)}return defer.promise()};this._handle_message=function(info){console.log("ModbusServerClient","Receiving new data.");var requests=this._get_requests(info.data),send_q=[],ret=null;console.log("ModbusServerClient","Current data package contains",requests.length," request");for(var i=0;i<requests.length;i+=1){ret=this._handle_request(requests[i]);send_q.push(this._send_answer(ret))}$.when(send_q).then(function(){console.log("ModbusServerClient","All requests handled.")}).fail(function(){console.log("ModbusServerClient","Handling requests failed.")})};var that=this;chrome.sockets.tcp.setPaused(this._client_socket_id,false,function(){console.log("ModbusServerClient","Client socket",that._client_socket_id,"unpaused.")});chrome.sockets.tcp.onReceive.addListener(this._handle_message.bind(this))};ModbusServerClient.method("getInfo",function(){return this._client});ModbusServerClient.method("close",function(){chrome.sockets.tcp.disconnect(this._client_socket_id,function(){})});ServerRegister=function(start,server){if(!(this instanceof ServerRegister)){return new ServerRegister(start,server)}Events.call(this);this._start=start;this._server=server;console.log("ServerRegister","Initialized with",this._start);this._command={count:0,id:0,ex:false};this._status={stateflag_1:0,stateflag_2:0,stateflag_3:0,stateflag_4:0,stateword:0,command_counter:0,command_ex:0,command_fail:0,arg:0};this._update_status=function(){var s=0;s+=this._status.stateflag_1?1:0;s+=this._status.stateflag_2?2:0;s+=this._status.stateflag_3?4:0;s+=this._status.stateflag_4?8:0;s+=this._status.stateword<<4;s+=this._status.command_counter<<11;s+=this._status.command_ex<<14;s+=this._status.command_fail<<15;this._server.setHoldingRegister(this._start,s);this._server.setHoldingRegister(this._start+1,this._status.arg);console.log("ServerRegister","Updated Server Register",s,s.toString(16),s.toString(2))};this._evaluate=function(val){this._command.count=(val&7)>>0;this._command.id=(val&32760)>>3;this._command.ex=(val&32768)>>15;if(!this._command.ex){console.log("ServerRegister","No execution flag.");return}console.log("ServerRegister","Firing event","execute_"+this._command.id,this);this.fire("execute_"+this._command.id);console.log("ServerRegister","New command",this._command);this._status.command_counter=this._command.count;this._status.command_ex=1;console.log("ServerRegister","Updated status",this._status);this._update_status()};this._server.on("write_single_register",function(start,val){console.log("ServerRegister","WriteSingleRegister executed.");if(start!==this._start+2){console.log("ServerRegister","Not this command register.",start,this._start+2);return}console.log("ServerRegister","Update on this command register.");this._evaluate(val)}.bind(this))};ServerRegister.inherits(Events);ModbusServer=function(host,port,simDelay){if(!(this instanceof ModbusServer)){return new ModbusServer(host,port,simDelay)}StateMachine.call(this,"offline");this._host=host;this._port=port;this._simDelay=simDelay;this._socket_id=null;this._clients=[];this._input_register=[];this._holding_register=[];this._coils=[];this.on("state_changed",function(oldState,newState){if(newState!=="offline"){return}for(var i in this._clients){this._clients[i].close()}});this._create_new_client=function(info){console.log("ModbusServer",this);console.log("ModbusServer","New client created.");var new_client=new ModbusServerClient(info,this,this._simDelay);this.fire("client_accepted",[new_client]);this._clients.push(new_client)}};ModbusServer.inherits(StateMachine);ModbusServer.method("getClients",function(){return this._clients});ModbusServer.method("start",function(){var defer=$.Deferred(),that=this;console.log("ModbusServer","Start called.");chrome.sockets.tcpServer.create(function(createInfo){that._socket_id=createInfo.socketId;console.log("ModbusServer","Socket created.",that._socket_id);console.log("ModbusServer","Listening on socket",that._socket_id,"and host",that._host,":",that._port);chrome.sockets.tcpServer.listen(that._socket_id,that._host,that._port,function(res){if(res<0){console.error("ModbusServer","Listening to",that._host,that._port,"failed",res);defer.reject({errCode:"notListening",result:res});chrome.sockets.tcpServer.close(that._socket_id,function(){});return}console.log("ModbusServer","Server is listening on",that._host,that._port);that.setState("online");chrome.sockets.tcpServer.onAccept.addListener(that._create_new_client.bind(that));defer.resolve()})})});ModbusServer.method("stop",function(){console.log("ModbusServer","Server stopped.");this.setState("offline");chrome.sockets.tcpServer.close(this._socket_id,function(){})});ModbusServer.method("setInputRegister",function(adr,value){this._input_register[adr]=value;return this});ModbusServer.method("getInputRegister",function(adr){if(!this._input_register[adr]){this._input_register[adr]=0}return this._input_register[adr]});ModbusServer.method("setHoldingRegister",function(adr,value){this._holding_register[adr]=value;return this});ModbusServer.method("getHoldingRegister",function(adr){if(!this._holding_register[adr]){this._holding_register[adr]=0}return this._holding_register[adr]});ModbusServer.method("createNewRegister",function(start){return new ServerRegister(start,this)});ModbusServer.method("createCustomRegister",function(cls,start){return new cls(start,this)});Register=function(client,loop,start){if(!(this instanceof Register)){return new Register(client,loop,start)}StateMachine.call(this,"ready");this._client=client;this._loop=loop;this._start=start;this.status={stateflag_1:false,stateflag_2:false,stateflag_3:false,stateflag_4:false,state:0,cmd_count:0,cmd_ex:false,cmd_err:false,arg:0};this._queue=[];this._cmd_id=0;this._loop.readHoldingRegisters(this._start,4);this._update_status=function(inputRegisters,holdingRegisters){var status_reg=holdingRegisters[this._start],status_arg=holdingRegisters[this._start+1];var s_1=1,s_2=2,s_3=4,s_4=8,s_state=2032,s_cid=14336,s_cide=16384,s_cidf=32768;this.status.stateflag_1=(status_reg&s_1)>>0;this.status.stateflag_2=(status_reg&s_2)>>1;this.status.stateflag_3=(status_reg&s_3)>>2;this.status.stateflag_4=(status_reg&s_4)>>3;this.status.state=(status_reg&s_state)>>4;this.status.cmd_count=(status_reg&s_cid)>>11;this.status.cmd_ex=(status_reg&s_cide)>>14;this.status.cmd_err=(status_reg&s_cidf)>>15;this.status.arg=status_arg;this.fire("update_status")};this._loop_listener_id=this._loop.on("update",this._update_status.bind(this));this._execute=function(command,param){console.log("Register","Queing an new command.",command,param);var defer=$.Deferred();this._queue.push({deferred:defer,command:command,param:param});if(this.inState("ready")){this._flush()}return defer.promise()};this.on("state_changed",function(oldState,newState){if(newState==="ready"){this._flush()}});this._flush=function(){console.log("Register","Flushing latest command.");if(this._queue.length===0){console.log("Register","Nothing to flush.");return}if(this.inState("execution")){console.log("Register","Waiting, currently in execution state.");return}this.setState("execution");var first=this._queue.shift(),command=first.command,param=first.param,defer=first.deferred;this._cmd_id=(this._cmd_id+1)%8;var cmd=command<<3,ex_flag=1<<15,that=this;this.cmd_reg=this._cmd_id+cmd+ex_flag;console.log("Register","Writing to modbus server.",this.cmd_reg);var promise_1,promise_2;if(!isNaN(first.param)){console.log("Register","Execution sets parameter.",first.param);promise_1=this._client.writeSingleRegister(this._start+3,first.param);promise_2=promise_1.then(this._client.writeSingleRegister(this._start+2,this.cmd_reg))}else{promise_2=this._client.writeSingleRegister(this._start+2,this.cmd_reg)}promise_2.fail(function(err){console.error("Register","Sending command to PLC failed.",err);defer.reject({errCode:"modbusError"});that.setState("ready")}).then(function(){console.log("Register","Sending command to PLC was successfull.");var handler_id,timeout_id,update_count=0;timeout_id=setTimeout(function(){console.error("Register","PLC did not executed the command inside the timeframe.",update_count);defer.reject({errCode:"timeout",update_count:update_count});that.setState("ready")},5e3);handler_id=that.on("update_status",function(){update_count+=1;if(that.status.cmd_count===that._cmd_id&&that.status.cmd_ex){console.log("Register","Command executed.",that.status);that.off(handler_id);clearTimeout(timeout_id);if(!that.status.cmd_err){console.log("Register","PLC executed command successfully.");defer.resolve(that.status.arg)}else{console.error("Register","PLC responded with execution error.");defer.reject({errCode:"plcError"})}that.setState("ready")}})})}};Register.inherits(StateMachine);Register.method("execute",function(command,arg){return this._execute(command,arg)});Register.method("getStateflag_1",function(){return this.status.stateflag_1});Register.method("getStateflag_2",function(){return this.status.stateflag_2});Register.method("getStateflag_3",function(){return this.status.stateflag_3});Register.method("getStateflag_4",function(){return this.status.stateflag_4});Register.method("getState",function(){return this.status.state});Register.method("close",function(){this._loop.off(this._loop_listener_id)})})();