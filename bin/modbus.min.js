Function.prototype.method=function(name,func){this.prototype[name]=func;return this};Function.method("inherits",function(superCtor){this.super_=superCtor;this.prototype=Object.create(superCtor.prototype,{constructor:{value:this,enumerable:false,writable:true,configurable:true}});return this});var Events=function(){this._cbList={}};Events.method("fire",function(name,args){if(!this._cbList[name]){return}for(var i in this._cbList[name]){this._cbList[name][i].apply(this,args)}});Events.method("fireLater",function(name){var that=this,args=[];if(arguments.length>1){args=Array.prototype.slice.call(arguments,1)}return function(){that.fire(name,args.concat(arguments))}});Events.method("on",function(name,func){if(!this._cbList[name]){this._cbList[name]=[]}this._cbList[name].push(func);return{name:name,index:this._cbList[name].length-1}});Events.method("off",function(id){this._cbList[id.name].splice(id.index);return this});var MBAP_TID=0,MBAP_PID=2,MBAP_LEN=4,MBAP_UID=6,BODY_FC=0,BODY_START=1,BODY_COUNT=3,READ_COILS=1,READ_INPUT_REGISTERS=4,WRITE_SINGLE_COIL=5,WRITE_SINGLE_REGISTER=6;ModbusClient=function(con){if(!(this instanceof ModbusClient)){return new ModbusClient(con)}Events.call(this);this.con=con;this.state="offline";this.id=0;this.handler={};var that=this;this._receiveListener=function(resp){var offset=0,hasMore=true,data=resp.data;while(hasMore){var mbap=new DataView(data,offset+0,7),tid=mbap.getUint16(0),pid=mbap.getUint16(2),len=mbap.getUint16(4),uid=mbap.getUint8(6),res={};res.header={transaction_id:tid,protocol_id:pid,length:len,unit_id:uid};var pdu=new DataView(data,offset+7,2);res.pdu={fc:pdu.getUint8(0),byte_count:pdu.getUint8(1)};if(!that.handler[tid]){offset+=9+res.pdu.byte_count;hasMore=offset<data.byteLength;continue}clearTimeout(that.handler[tid].timeout);var rHandler;if(res.pdu.fc>128){that.handler[tid].callback.reject();offset+=9+res.pdu.byte_count;hasMore=offset<data.byteLength;continue}rHandler=that._responseHandler[res.pdu.fc];if(!rHandler){var error={errCode:"noResponseHandler",fc:res.pdu.fc};that.fire("error",[error]);that.handler[tid].callback.reject(error);offset+=9+res.pdu.byte_count;hasMore=offset<data.byteLength;continue}var uHandler=that.handler[tid];res.pdu.data=rHandler(res,offset,data,uHandler.requestPacket);if(res.pdu.data){uHandler.callback.resolve(res.pdu.data,res)}else{uHandler.callback.resolve(res)}delete that.handler[tid];offset+=9+res.pdu.byte_count;hasMore=offset<data.byteLength}};this._responseHandler={};this._responseHandler[1]=function(response,offset,data,request){var dv=new DataView(data,offset+9,response.pdu.byte_count),fc_data=[],i,t,j,mask,dvReq=new DataView(request,0,request.byteLength),count=dvReq.getUint16(10);for(i=0;i<response.pdu.byte_count;i+=1){t=dv.getUint8(i);for(j=0;j<7;j+=1){mask=1<<j;fc_data.push(t&mask!==0);count-=1;if(count===0){break}}}return fc_data};this._responseHandler[4]=function(response,offset,data){var dv=new DataView(data,offset+9,response.pdu.byte_count),fc_data=[];for(var i=0;i<response.pdu.byte_count/2;i+=1){fc_data.push(dv.getUint16(i*2))}return fc_data};this._responseHandler[5]=function(response,offset,data){return null};this._responseHandler[6]=function(response,offset,data){return null};this._createMBAP=function(packet,id){var dv=new DataView(packet,0,7);dv.setUint16(MBAP_TID,id);dv.setUint16(MBAP_PID,0);dv.setUint16(MBAP_LEN,6);dv.setUint8(MBAP_UID,255)};this._createNewId=function(){this.id=(this.id+1)%1e4};this._sendPacket=function(packet){if(!this._pQueue){this._pQueue=[]}if(arguments.length>0){this._pQueue.push(packet)}if(this._isWaiting){return}if(this._pQueue.length===0){return}this._isWaiting=true;var that=this;chrome.sockets.tcp.send(this.con.socketId,this._pQueue.shift(),function(){that._isWaiting=false;that._sendPacket()})};this._setCallbackHandler=function(handler,packet,id){var that=this;var timeout=setTimeout(function(){handler.reject({errCode:"timeout"})},1e4);this.handler[id]={callback:handler,requestPacket:packet,timeout:timeout}};this._readCoils=function(regNo,regCount){var defer=$.Deferred();if(!this.con.socketId){defer.reject()}var packet=new ArrayBuffer(12),body=new DataView(packet,7,5);var id=this.id;this._createMBAP(packet,id);body.setUint8(BODY_FC,READ_COILS);body.setUint16(BODY_START,regNo);body.setUint16(BODY_COUNT,regCount);var data=new DataView(packet,0,12);this._setCallbackHandler(defer,packet,id);this._createNewId();this._sendPacket(packet);return defer.promise()};this._readInputRegisters=function(regNo,regCount){var defer=$.Deferred();if(!this.con.socketId){defer.reject()}var packet=new ArrayBuffer(12),body=new DataView(packet,7,5),id=this.id;this._createMBAP(packet,id);body.setUint8(BODY_FC,READ_INPUT_REGISTERS);body.setUint16(BODY_START,regNo);body.setUint16(BODY_COUNT,regCount);this._setCallbackHandler(defer,packet,id);this._createNewId();this._sendPacket(packet);return defer.promise()};this._writeSingleCoil=function(addr,value){var defer=$.Deferred();if(!this.con.socketId){defer.reject()}var packet=new ArrayBuffer(12),body=new DataView(packet,7,5),id=this.id;this._createMBAP(packet,id);body.setUint8(BODY_FC,WRITE_SINGLE_COIL);body.setUint16(BODY_START,addr);body.setUint16(BODY_COUNT,value?65280:0);this._setCallbackHandler(defer,packet,id);this._createNewId();this._sendPacket(packet);return defer.promise()};this._writeSingleRegister=function(regNo,value){var defer=$.Deferred();if(!this.con.socketId){defer.reject()}var packet=new ArrayBuffer(12),body=new DataView(packet,7,5),id=this.id;this._createMBAP(packet,id);body.setUint8(BODY_FC,WRITE_SINGLE_REGISTER);body.setUint16(BODY_START,regNo);body.setUint16(BODY_COUNT,value);this._setCallbackHandler(defer,packet,id);this._createNewId();this._sendPacket(packet);return defer.promise()};chrome.sockets.tcp.onReceive.addListener(this._receiveListener)};ModbusClient.inherits(Events);ModbusClient.method("readCoils",function(regNo,regCount){if(this.status==="offline"){throw new Error("Client is offline.")}return this._readCoils(regNo,regCount)});ModbusClient.method("readInputRegisters",function(regNo,regCount){if(this.status==="offline"){throw new Error("Client is offline.")}return this._readInputRegisters(regNo,regCount)});ModbusClient.method("writeSingleCoil",function(regNo,value){if(this.status==="offline"){throw new Error("Client is offline.")}return this._writeSingleCoil(regNo,value)});ModbusClient.method("writeSingleRegister",function(regNo,value){if(this.status==="offline"){throw new Error("Client is offline.")}return this._writeSingleRegister(regNo,value)});ModbusLoop=function(client,duration){if(!(this instanceof ModbusLoop)){return new ModbusLoop(client,duration)}Events.call(this);if(!client){throw new Error("No Modbus client defined!")}this._client=client;this._duration=duration;this._handler={};this._start=false;this._counter=-1;this._id=0;this._exTime=1e7;this._client.on("error",function(){this.fire("error",arguments)});this._confirmTermination=function(){if(this._counter===-1){return}for(var i in this._handler){if(!this._handler[i].executed){this.stop();this.fire("error",[{errCode:"loopOutOfSync"}]);return}}};this._resetExecutionFlags=function(){for(var i in this._handler){this._handler[i].executed=false}};this._callHandlers=function(){for(var i in this._handler){this._handler[i].func()}};var that=this;if(!this._duration){console.log("ModbusLoop","No duration, starting free loop.");this._freeLoop=function(){if(!that._start){return}var start=(new Date).getTime(),cntr=that._id,allHandler=[],finishHandler=function(){cntr-=1;if(cntr===0){var end=(new Date).getTime();that._exTime=end-start;for(var j in allHandler){that.off(allHandler[j])}that._freeLoop()}};for(var i in that._handler){var h=that.on(i,finishHandler);allHandler.push(h)}that._callHandlers()}}else{console.log("ModbusLoop","Starting loop with duration",this._duration);this.iid=setInterval(function(){if(!that._start){return}that._confirmTermination();that._resetExecutionFlags();that._callHandlers();that._counter=(that._counter+1)%1e3},this._duration)}};ModbusLoop.inherits(Events);ModbusLoop.method("readCoils",function(start,count){var that=this,id=this._id,handler=function(){that._client.readCoils(start,count).then(function(data){that._handler[id].executed=true;that.fire(id,data)}).fail(function(){that.stop();that.fire("error",[{errCode:id,args:arguments}])})};this._handler[id]={};this._handler[id].func=handler;this._handler[id].executed=false;return this._id++});ModbusLoop.method("readInputRegisters",function(start,count){var that=this,id=this._id,handler=function(){that._client.readInputRegisters(start,count).then(function(){that._handler[id].executed=true;that.fire(id,arguments)}).fail(function(){that.stop();that.fire("error",[{errCode:id,args:arguments}])})};this._handler[id]={};this._handler[id].func=handler;this._handler[id].executed=false;return this._id++});ModbusLoop.method("writeSingleCoil",function(reg,value){var that=this,id=this._id,handler=function(){that._client.writeSingleCoil(reg,value).then(function(){that._handler[id].executed=true;that.fire(id,arguments)}).fail(function(){that.stop();that.fire("error",[{errCode:id,args:arguments}])})};this._handler[id]={};this._handler[id].func=handler;this._handler[id].executed=false;return this._id++});ModbusLoop.method("writeSingleRegister",function(reg,value){var that=this,id=this._id,handler=function(){that._client.writeSingleRegister(reg,value).then(function(){that._handler[id].executed=true;that.fire(id,arguments)}).fail(function(){that.stop();that.fire("error",[{errCode:id,args:arguments}])})};this._handler[id]={};this._handler[id].func=handler;this._handler[id].executed=false;return this._id++});ModbusLoop.method("createRegister",function(cls,startReg){console.log("Create Single Command/Status Register.");var reg=new cls(this._client,startReg),id=this.readInputRegisters(startReg,2);this.on(id,function(data){reg.update_status(data[0],data[1])});return reg});ModbusLoop.method("createMultipleRegisters",function(clsses,startReg,count){console.log("ModbusLoop","Create multiple Command/Status Register.",arguments);var ret=[],j=0,id;for(var i=0;i<count;i+=1){ret.push(new clsses[j](this._client,startReg+i*4));if(j<clsses.length-1){j+=1}}console.log("ModbusLoop","Register created",ret);id=this.readInputRegisters(startReg,count*4);console.log("ModbusLoop","Loop update id is",id);this.on(id,function(data){for(var k=0;k<count;k+=1){ret[k].update_status(data[k*4],data[k*4+1])}});return ret});ModbusLoop.method("remove",function(id){if(!this._handler[id]){return false}delete this._handler[id];return true});ModbusLoop.method("start",function(){this._counter=-1;this._start=true;if(!this._duration){this._freeLoop()}});ModbusLoop.method("stop",function(){this._start=false});Modbus={connect:function(){var con={},defer=$.Deferred();con.host=arguments[0];con.port=arguments.length===2?arguments[1]:502;console.log("Modbus","Creating Socket for",con.host,con.port);chrome.sockets.tcp.create({},function(createInfo){console.log("Modbus","Socket created with socketId",createInfo.socketId);con.socketId=createInfo.socketId;chrome.sockets.tcp.connect(con.socketId,con.host,con.port,function(result){if(result!==0){console.log("Modbus","Connection not established. Error Code",result);defer.reject({errCode:"connectionError",result:result});chrome.sockets.tcp.destroy(con.socketId);return}console.log("Modbus","Connection established.");defer.resolve(new ModbusClient(con))})});return defer.promise()},close:function(socketId){console.log("Modbus","Closing socket with socketId",socketId);chrome.sockets.tcp.close(socketId)}};Register=function(client,start){if(!(this instanceof Register)){return new Register(client,start)}Events.call(this);this.client=client;this.start=start;this.status={stateflag_1:false,stateflag_2:false,stateflag_3:false,stateflag_4:false,state:0,cmd_count:0,cmd_ex:false,cmd_err:false,arg:0};this._inExecution=false;this._queue=[];this._cmd_id=0;this._execute=function(command,param){console.log("Register","Queing an new command.",command,param);var defer=$.Deferred();this._queue.push({deferred:defer,command:command,param:param});this._flush();return defer.promise()};this._flush=function(){console.log("Register","Flushing latest command.");if(this._queue.length===0){console.log("Register","Nothing to flush.");return}if(this._inExecution){console.log("Register","Waiting, currently in execution state.");return}this._inExecution=true;var first=this._queue.pop(),command=first.command,param=first.param,defer=first.deferred;this._cmd_id=(this._cmd_id+1)%8;var cmd=command<<3,ex_flag=1<<15,that=this;this.cmd_reg=this._cmd_id+cmd+ex_flag;console.log("Register","Writing to modbus server.");this.client.writeSingleRegister(this.start+2,this.cmd_reg).fail(function(err){console.error("Register","Sending command to PLC failed.",err);defer.reject({errCode:"modbusError"});that._inExecution=false;that._flush()}).then(function(){console.log("Register","Sending command to PLC was successfull.");var handler_id,timeout_id,update_count=0;timeout_id=setTimeout(function(){console.error("Register","PLC did not executed the command inside the timeframe.");defer.reject({errCode:"timeout",update_count:update_count});that._inExecution=false;that._flush()},5e3);handler_id=that.on("update_status",function(){update_count+=1;if(that.status.cmd_count===that._cmd_id&&that.status.cmd_ex){that.off(handler_id);clearTimeout(timeout_id);if(!that.status.cmd_err){console.log("Register","PLC executed command successfully.");defer.resolve(that.status.arg)}else{console.error("Register","PLC responded with execution error.");defer.reject({errCode:"plcError"})}that._inExecution=false;that._flush()}})})}};Register.inherits(Events);Register.method("update_status",function(status_reg,status_arg){var s_1=1,s_2=2,s_3=4,s_4=8,s_state=2032,s_cid=14336,s_cide=16384,s_cidf=32768;this.status.stateflag_1=(status_reg&s_1)>>0;this.status.stateflag_2=(status_reg&s_2)>>1;this.status.stateflag_3=(status_reg&s_3)>>2;this.status.stateflag_4=(status_reg&s_4)>>3;this.status.state=(status_reg&s_state)>>4;this.status.cmd_count=(status_reg&s_cid)>>11;this.status.cmd_ex=(status_reg&s_cide)>>14;this.status.cmd_err=(status_reg&s_cidf)>>15;this.status.arg=status_arg;this.fire("update_status")});